[{"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\index.js":"1","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\reportWebVitals.js":"2","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\store.js":"3","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\App.js":"4","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList-reducer.js":"5","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMapContainer.jsx":"6","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryListContainer.jsx":"7","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\HeaderContainer.jsx":"8","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraphContainer.jsx":"9","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\FooterContainer.jsx":"10","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCasesContainer.jsx":"11","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTableContainer.jsx":"12","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList.js":"13","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryInfoList.js":"14","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList.jsx":"15","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraph.jsx":"16","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\Header.jsx":"17","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMap.jsx":"18","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTable.jsx":"19","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCases.jsx":"20","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\Footer.jsx":"21","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearchContainer.jsx":"22","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecoveredContainer.jsx":"23","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeathsContainer.jsx":"24","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevelContainer.jsx":"25","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearch.jsx":"26","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeaths.jsx":"27","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecovered.jsx":"28","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevel.jsx":"29","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\ListCountry\\ListCountryConteiner.jsx":"30","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\ListCountry\\ListCountry.jsx":"31"},{"size":645,"mtime":1608056473570,"results":"32","hashOfConfig":"33"},{"size":375,"mtime":1607609574926,"results":"34","hashOfConfig":"33"},{"size":335,"mtime":1608653925798,"results":"35","hashOfConfig":"33"},{"size":908,"mtime":1608989581019,"results":"36","hashOfConfig":"33"},{"size":5918,"mtime":1609092909181,"results":"37","hashOfConfig":"33"},{"size":815,"mtime":1609092909178,"results":"38","hashOfConfig":"33"},{"size":1579,"mtime":1609148217024,"results":"39","hashOfConfig":"33"},{"size":273,"mtime":1608056473566,"results":"40","hashOfConfig":"33"},{"size":473,"mtime":1608653925779,"results":"41","hashOfConfig":"33"},{"size":273,"mtime":1608653925792,"results":"42","hashOfConfig":"33"},{"size":346,"mtime":1609092909181,"results":"43","hashOfConfig":"33"},{"size":1679,"mtime":1609076018826,"results":"44","hashOfConfig":"33"},{"size":67397,"mtime":1608653925797,"results":"45","hashOfConfig":"46"},{"size":180671,"mtime":1608653925795,"results":"47","hashOfConfig":"33"},{"size":1183,"mtime":1609148255763,"results":"48","hashOfConfig":"33"},{"size":9866,"mtime":1609105781412,"results":"49","hashOfConfig":"33"},{"size":244,"mtime":1608827748872,"results":"50","hashOfConfig":"33"},{"size":2385,"mtime":1609092909178,"results":"51","hashOfConfig":"33"},{"size":2268,"mtime":1609148404460,"results":"52","hashOfConfig":"33"},{"size":670,"mtime":1609092909180,"results":"53","hashOfConfig":"33"},{"size":854,"mtime":1608827748871,"results":"54","hashOfConfig":"33"},{"size":903,"mtime":1609147964899,"results":"55","hashOfConfig":"33"},{"size":704,"mtime":1609149204618,"results":"56","hashOfConfig":"33"},{"size":698,"mtime":1609156633947,"results":"57","hashOfConfig":"33"},{"size":692,"mtime":1609156625024,"results":"58","hashOfConfig":"33"},{"size":2180,"mtime":1609148875545,"results":"59","hashOfConfig":"33"},{"size":1765,"mtime":1609156444602,"results":"60","hashOfConfig":"33"},{"size":1788,"mtime":1609151447283,"results":"61","hashOfConfig":"33"},{"size":1746,"mtime":1609156804150,"results":"62","hashOfConfig":"33"},{"size":407,"mtime":1609148087478,"results":"63","hashOfConfig":"33"},{"size":1183,"mtime":1609148063850,"results":"64","hashOfConfig":"33"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"1wnb8nm",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o6yqkq",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"67"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\index.js",[],["129","130"],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\reportWebVitals.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\store.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\App.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList-reducer.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMapContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryListContainer.jsx",["131","132"],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\HeaderContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraphContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\FooterContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCasesContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTableContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryInfoList.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraph.jsx",["133","134"],"import { Bar, Line } from 'react-chartjs-2';\r\nimport React, { Component } from 'react';\r\n\r\nimport axios from 'axios';\r\nimport styles from './CovidGraph.module.scss';\r\n\r\nexport default class CovidGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.input = React.createRef();\r\n    this.isDaily = false;\r\n\r\n    this.state = {\r\n      chartData: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getGlobalCasesData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.activeCountry.country !== prevProps.activeCountry.country)\r\n      this.getCountryCasesData();\r\n  }\r\n\r\n  getGlobalCasesData(indicator = 'cases') {\r\n    axios\r\n      .get('https://disease.sh/v3/covid-19/historical/all?lastdays=366')\r\n      .then((response) => {\r\n        this.isDaily\r\n          ? this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: Object.keys(response.data[indicator]),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Global daily cases',\r\n                      data: Object.values(response.data[indicator]).map(\r\n                        (item, index, arr) => {\r\n                          if (arr[index + 1] > arr[index])\r\n                            return arr[index + 1] - arr[index];\r\n                        }\r\n                      ),\r\n                      backgroundColor: '#F2AA16',\r\n                      borderColor: '#F2AA16',\r\n                      borderWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Global daily cases',\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [\r\n                      {\r\n                        ticks: { fontColor: '#bdbdbd' },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          : this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: Object.keys(response.data[indicator]),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Global cases',\r\n                      data: Object.values(response.data[indicator]),\r\n                      pointBorderColor: '#F2AA16',\r\n                      pointBackgroundColor: '#F2AA16',\r\n                      pointWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Global cases',\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          callback: (value) => `${value / 10e6}M`,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            });\r\n      });\r\n  }\r\n\r\n  getCountryCasesData(indicator = 'confirmed') {\r\n    axios\r\n      .get(\r\n        `https://api.covid19api.com/dayone/country/${this.props.activeCountry.country}/status/${indicator}`\r\n      )\r\n      .then((response) => {\r\n        this.isDaily\r\n          ? this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: response.data.map((item) =>\r\n                    new Date(item.Date).toString().substring(4, 11)\r\n                  ),\r\n                  datasets: [\r\n                    {\r\n                      label: `${this.props.activeCountry.country} daily cases`,\r\n                      data: response.data\r\n                        .map((item) => item.Cases)\r\n                        .map((item, index, arr) => {\r\n                          if (arr[index + 1] > arr[index])\r\n                            return arr[index + 1] - arr[index];\r\n                        }),\r\n                      backgroundColor: '#F2AA16',\r\n                      borderColor: '#F2AA16',\r\n                      borderWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: `${this.props.activeCountry.country} daily cases`,\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [{ ticks: { fontColor: '#bdbdbd' } }],\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          : this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: response.data.map((item) =>\r\n                    new Date(item.Date).toString().substring(4, 11)\r\n                  ),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Country cases',\r\n                      data: response.data.map((item) => item.Cases),\r\n                      pointBorderColor: '#F2AA16',\r\n                      pointBackgroundColor: '#F2AA16',\r\n                      pointWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: `${this.props.activeCountry.country}  cases`,\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [{ ticks: { fontColor: '#bdbdbd' } }],\r\n                  },\r\n                },\r\n              },\r\n            });\r\n      });\r\n  }\r\n\r\n  changeInput(e) {\r\n    const target = e.target;\r\n    this.isDaily = target.type === 'checkbox' ? target.checked : target.value;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.covidGraph}>\r\n        {this.isDaily ? (\r\n          <Bar\r\n            data={this.state.chartData.data}\r\n            options={this.state.chartData.options}\r\n            width={'100%'}\r\n            height={'100%'}\r\n          />\r\n        ) : (\r\n          <Line\r\n            data={this.state.chartData.data}\r\n            options={this.state.chartData.options}\r\n            width={'100%'}\r\n            height={'100%'}\r\n          />\r\n        )}\r\n        <div>\r\n          <button\r\n            id='cases'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.innerText)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            confirmed\r\n          </button>\r\n          <button\r\n            id='deaths'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.id)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            deaths\r\n          </button>\r\n          <button\r\n            id='recovered'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.id)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            recovered\r\n          </button>\r\n          <label>\r\n            Daily\r\n            <input\r\n              type='checkbox'\r\n              ref={this.input}\r\n              onChange={(e) => this.changeInput(e)}\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\Header.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMap.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTable.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCases.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\Footer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearchContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecoveredContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeathsContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevelContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearch.jsx",["135"],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeaths.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecovered.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevel.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\ListCountry\\ListCountryConteiner.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\ListCountry\\ListCountry.jsx",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":1,"column":41,"nodeType":"142","messageId":"143","endLine":1,"endColumn":78},{"ruleId":"140","severity":1,"message":"144","line":1,"column":115,"nodeType":"142","messageId":"143","endLine":1,"endColumn":154},{"ruleId":"145","severity":1,"message":"146","line":40,"column":44,"nodeType":"147","messageId":"148","endLine":40,"endColumn":46},{"ruleId":"145","severity":1,"message":"146","line":155,"column":49,"nodeType":"147","messageId":"148","endLine":155,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":43,"column":56,"nodeType":"147","messageId":"148","endLine":43,"endColumn":58},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'setActiveRelativeCountryActionCreator' is defined but never used.","Identifier","unusedVar","'setCovidTableActiveCountryActionCreator' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]