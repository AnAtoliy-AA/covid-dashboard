[{"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\index.js":"1","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\reportWebVitals.js":"2","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\App.js":"3","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\redux\\store.js":"4","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList-reducer.js":"5","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCasesContainer.jsx":"6","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\HeaderContainer.jsx":"7","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\FooterContainer.jsx":"8","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMapContainer.jsx":"9","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryListContainer.jsx":"10","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraphContainer.jsx":"11","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTableContainer.jsx":"12","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList.js":"13","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\redux\\countryInfoList.js":"14","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCases.jsx":"15","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\Header.jsx":"16","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\Footer.jsx":"17","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMap.jsx":"18","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraph.jsx":"19","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTable.jsx":"20","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList.jsx":"21","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearchContainer.jsx":"22","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeathsContainer.jsx":"23","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevelContainer.jsx":"24","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecoveredContainer.jsx":"25","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearch.jsx":"26","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeaths.jsx":"27","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevel.jsx":"28","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecovered.jsx":"29"},{"size":645,"mtime":1608057103795,"results":"30","hashOfConfig":"31"},{"size":375,"mtime":1608056957743,"results":"32","hashOfConfig":"31"},{"size":978,"mtime":1608654758593,"results":"33","hashOfConfig":"31"},{"size":335,"mtime":1608653985285,"results":"34","hashOfConfig":"31"},{"size":5939,"mtime":1608653985277,"results":"35","hashOfConfig":"31"},{"size":403,"mtime":1608057103795,"results":"36","hashOfConfig":"31"},{"size":273,"mtime":1608057103795,"results":"37","hashOfConfig":"31"},{"size":273,"mtime":1608653985205,"results":"38","hashOfConfig":"31"},{"size":818,"mtime":1608653985134,"results":"39","hashOfConfig":"31"},{"size":2431,"mtime":1608653985118,"results":"40","hashOfConfig":"31"},{"size":473,"mtime":1608653985118,"results":"41","hashOfConfig":"31"},{"size":1679,"mtime":1608653985189,"results":"42","hashOfConfig":"31"},{"size":67397,"mtime":1608653985277,"results":"43","hashOfConfig":"31"},{"size":180671,"mtime":1608653985273,"results":"44","hashOfConfig":"31"},{"size":369,"mtime":1608653985205,"results":"45","hashOfConfig":"31"},{"size":244,"mtime":1608673915425,"results":"46","hashOfConfig":"31"},{"size":854,"mtime":1608673677203,"results":"47","hashOfConfig":"31"},{"size":1971,"mtime":1608653985134,"results":"48","hashOfConfig":"31"},{"size":8987,"mtime":1608653985118,"results":"49","hashOfConfig":"31"},{"size":3076,"mtime":1608735623821,"results":"50","hashOfConfig":"31"},{"size":4059,"mtime":1608653985102,"results":"51","hashOfConfig":"31"},{"size":593,"mtime":1608057103763,"results":"52","hashOfConfig":"31"},{"size":561,"mtime":1608653985149,"results":"53","hashOfConfig":"31"},{"size":673,"mtime":1608653985157,"results":"54","hashOfConfig":"31"},{"size":567,"mtime":1608653985173,"results":"55","hashOfConfig":"31"},{"size":1837,"mtime":1608726757136,"results":"56","hashOfConfig":"31"},{"size":1369,"mtime":1608736010609,"results":"57","hashOfConfig":"31"},{"size":1409,"mtime":1608736559072,"results":"58","hashOfConfig":"31"},{"size":1470,"mtime":1608736886634,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"dtu8tf",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\index.js",[],["121","122"],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\reportWebVitals.js",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\App.js",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\redux\\store.js",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList-reducer.js",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCasesContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\HeaderContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\FooterContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMapContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryListContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraphContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTableContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList.js",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\redux\\countryInfoList.js",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCases.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\Header.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\Footer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMap.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraph.jsx",["123","124"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { Bar, Line } from 'react-chartjs-2';\r\n\r\nimport styles from './CovidGraph.module.scss';\r\n\r\nexport default class CovidGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.input = React.createRef();\r\n    this.isDaily = false;\r\n\r\n    this.state = {\r\n      chartData: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getGlobalCasesData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.activeCountry.Slug !== prevProps.activeCountry.Slug)\r\n      this.getCountryCasesData();\r\n  }\r\n\r\n  getGlobalCasesData(indicator = 'cases') {\r\n    axios\r\n      .get('https://disease.sh/v3/covid-19/historical/all?lastdays=366')\r\n      .then((response) => {\r\n        this.isDaily\r\n          ? this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: Object.keys(response.data[indicator]),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Global daily cases',\r\n                      data: Object.values(response.data[indicator]).map(\r\n                        (item, index, arr) => {\r\n                          if (arr[index + 1] > arr[index])\r\n                            return arr[index + 1] - arr[index];\r\n                        }\r\n                      ),\r\n                      backgroundColor: '#F2AA16',\r\n                      borderColor: '#F2AA16',\r\n                      borderWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Global daily cases',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          : this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: Object.keys(response.data[indicator]),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Global cases',\r\n                      data: Object.values(response.data[indicator]),\r\n                      backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n                      pointBorderColor: '#F2AA16',\r\n                      pointBackgroundColor: '#F2AA16',\r\n                      pointWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Global cases',\r\n                  },\r\n                  legend: { display: false },\r\n\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          callback: (value) => `${value / 10e6}M`,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            });\r\n      });\r\n  }\r\n\r\n  getCountryCasesData(indicator = 'confirmed') {\r\n    axios\r\n      .get(\r\n        `https://api.covid19api.com/dayone/country/${this.props.activeCountry.Slug}/status/${indicator}`\r\n      )\r\n      .then((response) => {\r\n        this.isDaily\r\n          ? this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: response.data.map((item) =>\r\n                    new Date(item.Date).toString().substring(4, 11)\r\n                  ),\r\n                  datasets: [\r\n                    {\r\n                      label: `${this.props.activeCountry.Country} daily cases`,\r\n                      data: response.data\r\n                        .map((item) => item.Cases)\r\n                        .map((item, index, arr) => {\r\n                          if (arr[index + 1] > arr[index])\r\n                            return arr[index + 1] - arr[index];\r\n                        }),\r\n                      backgroundColor: '#F2AA16',\r\n                      borderColor: '#F2AA16',\r\n                      borderWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: `${this.props.activeCountry.Country} daily cases`,\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          : this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: response.data.map((item) =>\r\n                    new Date(item.Date).toString().substring(4, 11)\r\n                  ),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Country cases',\r\n                      data: response.data.map((item) => item.Cases),\r\n                      backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n\r\n                      pointBorderColor: '#F2AA16',\r\n                      pointBackgroundColor: '#F2AA16',\r\n                      pointWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: `${this.props.activeCountry.Country}  cases`,\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            });\r\n      });\r\n  }\r\n\r\n  changeInput(e) {\r\n    const target = e.target;\r\n    this.isDaily = target.type === 'checkbox' ? target.checked : target.value;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.covidGraph}>\r\n        {this.isDaily ? (\r\n          <Bar\r\n            data={this.state.chartData.data}\r\n            options={this.state.chartData.options}\r\n          />\r\n        ) : (\r\n          <Line\r\n            data={this.state.chartData.data}\r\n            options={this.state.chartData.options}\r\n          />\r\n        )}\r\n        <div>\r\n          <button\r\n            id='cases'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.innerText)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            confirmed\r\n          </button>\r\n          <button\r\n            id='deaths'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.id)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            deaths\r\n          </button>\r\n          <button\r\n            id='recovered'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.id)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            recovered\r\n          </button>\r\n          <label>\r\n            Daily\r\n            <input\r\n              type='checkbox'\r\n              ref={this.input}\r\n              onChange={(e) => this.changeInput(e)}\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTable.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearchContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeathsContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevelContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecoveredContainer.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearch.jsx",["125"],"import React, { Component } from 'react';\r\n\r\nimport styles from './CountrySearch.module.scss';\r\n\r\nexport default class CountrySearch extends Component {\r\n  state = {\r\n    searchTerm: '',\r\n  };\r\n\r\n  selectCountry(country) {\r\n    this.setState({ searchTerm: country });\r\n  }\r\n\r\n  onCountryChanged(activeCountry) {\r\n    this.props.setActiveCountry(activeCountry);\r\n    this.setState({ searchTerm: '' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.countrySearch}>\r\n        <input\r\n          type='text'\r\n          className={styles.search}\r\n          placeholder='Search for a Country'\r\n          value={this.state.searchTerm}\r\n          onInput={(event) => this.selectCountry(event.target.value)}\r\n        />\r\n        <div\r\n          className={\r\n            this.state.searchTerm.length !== 0\r\n              ? styles.results\r\n              : styles.results__hide\r\n          }\r\n        >\r\n          <ul className={styles.countries}>\r\n            {this.props.countryList.map((country) => {\r\n              if (country.Slug.includes(this.state.searchTerm.toLowerCase())) {\r\n                return (\r\n                  <li\r\n                    key={country.CountryCode}\r\n                    className={styles.countryItem}\r\n                    onClick={() => this.onCountryChanged(country)}\r\n                  >\r\n                    <img\r\n                      src={`https://www.countryflags.io/${country.CountryCode}/shiny/64.png`}\r\n                      className={styles.countryItem_flag}\r\n                      alt='flag'\r\n                    />\r\n                    <h3 className={styles.countryItem_name}>\r\n                      {country.Country}\r\n                    </h3>\r\n                  </li>\r\n                );\r\n              }\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeaths.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevel.jsx",[],"E:\\covid\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecovered.jsx",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":41,"column":44,"nodeType":"132","messageId":"133","endLine":41,"endColumn":46},{"ruleId":"130","severity":1,"message":"131","line":144,"column":49,"nodeType":"132","messageId":"133","endLine":144,"endColumn":51},{"ruleId":"130","severity":1,"message":"131","line":37,"column":51,"nodeType":"132","messageId":"133","endLine":37,"endColumn":53},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]