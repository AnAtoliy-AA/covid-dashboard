[{"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\index.js":"1","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\reportWebVitals.js":"2","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\store.js":"3","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\App.js":"4","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList-reducer.js":"5","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMapContainer.jsx":"6","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\HeaderContainer.jsx":"7","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraphContainer.jsx":"8","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\FooterContainer.jsx":"9","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCasesContainer.jsx":"10","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTableContainer.jsx":"11","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryInfoList.js":"12","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraph.jsx":"13","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\Header.jsx":"14","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMap.jsx":"15","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTable.jsx":"16","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCases.jsx":"17","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\Footer.jsx":"18","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearchContainer.jsx":"19","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecoveredContainer.jsx":"20","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeathsContainer.jsx":"21","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevelContainer.jsx":"22","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearch.jsx":"23","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeaths.jsx":"24","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecovered.jsx":"25","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevel.jsx":"26","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\api\\api.js":"27","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList\\CountryListContainer.jsx":"28","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList\\CountryList.jsx":"29","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\AllCountryListContainer.jsx":"30"},{"size":645,"mtime":1608056473570,"results":"31","hashOfConfig":"32"},{"size":375,"mtime":1607609574926,"results":"33","hashOfConfig":"32"},{"size":456,"mtime":1609240566506,"results":"34","hashOfConfig":"32"},{"size":917,"mtime":1609253318132,"results":"35","hashOfConfig":"32"},{"size":4399,"mtime":1609246052663,"results":"36","hashOfConfig":"32"},{"size":825,"mtime":1609245344755,"results":"37","hashOfConfig":"32"},{"size":273,"mtime":1608056473566,"results":"38","hashOfConfig":"32"},{"size":534,"mtime":1609194905052,"results":"39","hashOfConfig":"32"},{"size":273,"mtime":1608653925792,"results":"40","hashOfConfig":"32"},{"size":346,"mtime":1609092909181,"results":"41","hashOfConfig":"32"},{"size":1383,"mtime":1609245427860,"results":"42","hashOfConfig":"32"},{"size":180671,"mtime":1608653925795,"results":"43","hashOfConfig":"32"},{"size":10030,"mtime":1609196480743,"results":"44","hashOfConfig":"32"},{"size":244,"mtime":1608827748872,"results":"45","hashOfConfig":"32"},{"size":2385,"mtime":1609183182372,"results":"46","hashOfConfig":"32"},{"size":1829,"mtime":1609192562167,"results":"47","hashOfConfig":"32"},{"size":670,"mtime":1609092909180,"results":"48","hashOfConfig":"32"},{"size":854,"mtime":1608827748871,"results":"49","hashOfConfig":"32"},{"size":402,"mtime":1609253394341,"results":"50","hashOfConfig":"32"},{"size":707,"mtime":1609194879664,"results":"51","hashOfConfig":"32"},{"size":701,"mtime":1609194845994,"results":"52","hashOfConfig":"32"},{"size":695,"mtime":1609194869706,"results":"53","hashOfConfig":"32"},{"size":2160,"mtime":1609253874651,"results":"54","hashOfConfig":"32"},{"size":1762,"mtime":1609190718509,"results":"55","hashOfConfig":"32"},{"size":1785,"mtime":1609190751312,"results":"56","hashOfConfig":"32"},{"size":1743,"mtime":1609190528855,"results":"57","hashOfConfig":"32"},{"size":358,"mtime":1609240474142,"results":"58","hashOfConfig":"32"},{"size":321,"mtime":1609253409843,"results":"59","hashOfConfig":"32"},{"size":1183,"mtime":1609252992869,"results":"60","hashOfConfig":"32"},{"size":1880,"mtime":1609253735894,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1wnb8nm",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\index.js",[],["124","125"],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\reportWebVitals.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\store.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\App.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList-reducer.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMapContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\HeaderContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraphContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\FooterContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCasesContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTableContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryInfoList.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraph.jsx",["126","127"],"import { Bar, Line } from 'react-chartjs-2';\r\nimport React, { Component } from 'react';\r\n\r\nimport axios from 'axios';\r\nimport styles from './CovidGraph.module.scss';\r\n\r\nexport default class CovidGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.input = React.createRef();\r\n    // this.isDaily = false;\r\n    this.state = {\r\n      chartData: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getGlobalCasesData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.activeCountry.country !== prevProps.activeCountry.country)\r\n      this.getCountryCasesData();\r\n  }\r\n\r\n  getGlobalCasesData(indicator = 'cases') {\r\n    axios\r\n      .get('https://disease.sh/v3/covid-19/historical/all?lastdays=366')\r\n      .then((response) => {\r\n        // this.isDaily\r\n       (!this.props.isLastDaySelected)\r\n          ? this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: Object.keys(response.data[indicator]),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Global daily cases',\r\n                      data: Object.values(response.data[indicator]).map(\r\n                        (item, index, arr) => {\r\n                          if (arr[index + 1] > arr[index])\r\n                            return arr[index + 1] - arr[index];\r\n                        }\r\n                      ),\r\n                      backgroundColor: '#F2AA16',\r\n                      borderColor: '#F2AA16',\r\n                      borderWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Global daily cases',\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [\r\n                      {\r\n                        ticks: { fontColor: '#bdbdbd' },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          : this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: Object.keys(response.data[indicator]),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Global cases',\r\n                      data: Object.values(response.data[indicator]),\r\n                      pointBorderColor: '#F2AA16',\r\n                      pointBackgroundColor: '#F2AA16',\r\n                      pointWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Global cases',\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          callback: (value) => `${value / 10e6}M`,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            });\r\n      });\r\n  }\r\n\r\n  getCountryCasesData(indicator = 'confirmed') {\r\n    axios\r\n      .get(\r\n        `https://api.covid19api.com/dayone/country/${this.props.activeCountry.country}/status/${indicator}`\r\n      )\r\n      .then((response) => {\r\n        // this.isDaily\r\n        (this.props.isLastDaySelected)\r\n          ? this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: response.data.map((item) =>\r\n                    new Date(item.Date).toString().substring(4, 11)\r\n                  ),\r\n                  datasets: [\r\n                    {\r\n                      label: `${this.props.activeCountry.country} daily cases`,\r\n                      data: response.data\r\n                        .map((item) => item.Cases)\r\n                        .map((item, index, arr) => {\r\n                          if (arr[index + 1] > arr[index])\r\n                            return arr[index + 1] - arr[index];\r\n                        }),\r\n                      backgroundColor: '#F2AA16',\r\n                      borderColor: '#F2AA16',\r\n                      borderWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: `${this.props.activeCountry.country} daily cases`,\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [{ ticks: { fontColor: '#bdbdbd' } }],\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          : this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: response.data.map((item) =>\r\n                    new Date(item.Date).toString().substring(4, 11)\r\n                  ),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Country cases',\r\n                      data: response.data.map((item) => item.Cases),\r\n                      pointBorderColor: '#F2AA16',\r\n                      pointBackgroundColor: '#F2AA16',\r\n                      pointWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: `${this.props.activeCountry.country}  cases`,\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [{ ticks: { fontColor: '#bdbdbd' } }],\r\n                  },\r\n                },\r\n              },\r\n            });\r\n      });\r\n  }\r\n\r\n  // changeInput(e) {\r\n  //   const target = e.target;\r\n  //   this.isDaily = target.type === 'checkbox' ? target.checked : target.value;\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.covidGraph}>\r\n         {/* {this.isDaily ? ( */}\r\n        {this.props.isLastDaySelected? (\r\n          <Bar\r\n            data={this.state.chartData.data}\r\n            options={this.state.chartData.options}\r\n            width={'100%'}\r\n            height={'100%'}\r\n          />\r\n        ) : (\r\n          <Line\r\n            data={this.state.chartData.data}\r\n            options={this.state.chartData.options}\r\n            // width={'100%'}\r\n            // height={'100%'}\r\n          />\r\n        )}\r\n        {/* <div>\r\n          <button\r\n            id='cases'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.innerText)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            confirmed\r\n          </button>\r\n          <button\r\n            id='deaths'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.id)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            deaths\r\n          </button>\r\n          <button\r\n            id='recovered'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.id)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            recovered\r\n          </button>\r\n          <label>\r\n            Daily\r\n            <input\r\n              type='checkbox'\r\n              ref={this.input}\r\n              onChange={(e) => this.changeInput(e)}\r\n            />\r\n          </label>\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\Header.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMap.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTable.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCases.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\Footer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearchContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecoveredContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeathsContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevelContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearch.jsx",["128"],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeaths.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecovered.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevel.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\api\\api.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList\\CountryListContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList\\CountryList.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\AllCountryListContainer.jsx",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":40,"column":44,"nodeType":"135","messageId":"136","endLine":40,"endColumn":46},{"ruleId":"133","severity":1,"message":"134","line":156,"column":49,"nodeType":"135","messageId":"136","endLine":156,"endColumn":51},{"ruleId":"133","severity":1,"message":"134","line":43,"column":56,"nodeType":"135","messageId":"136","endLine":43,"endColumn":58},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]