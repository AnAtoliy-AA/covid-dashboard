[{"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\index.js":"1","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\reportWebVitals.js":"2","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\store.js":"3","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\App.js":"4","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList-reducer.js":"5","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMapContainer.jsx":"6","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryListContainer.jsx":"7","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\HeaderContainer.jsx":"8","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraphContainer.jsx":"9","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\FooterContainer.jsx":"10","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCasesContainer.jsx":"11","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTableContainer.jsx":"12","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList.js":"13","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryInfoList.js":"14","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList.jsx":"15","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraph.jsx":"16","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\Header.jsx":"17","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMap.jsx":"18","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTable.jsx":"19","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCases.jsx":"20","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\Footer.jsx":"21","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearchContainer.jsx":"22","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecoveredContainer.jsx":"23","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeathsContainer.jsx":"24","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevelContainer.jsx":"25","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearch.jsx":"26","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeaths.jsx":"27","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecovered.jsx":"28","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevel.jsx":"29","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\ListCountry\\ListCountryConteiner.jsx":"30","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\ListCountry\\ListCountry.jsx":"31"},{"size":645,"mtime":1608056473570,"results":"32","hashOfConfig":"33"},{"size":375,"mtime":1607609574926,"results":"34","hashOfConfig":"33"},{"size":335,"mtime":1608653925798,"results":"35","hashOfConfig":"33"},{"size":908,"mtime":1608989581019,"results":"36","hashOfConfig":"33"},{"size":5918,"mtime":1609092909181,"results":"37","hashOfConfig":"33"},{"size":815,"mtime":1609092909178,"results":"38","hashOfConfig":"33"},{"size":1871,"mtime":1609107229494,"results":"39","hashOfConfig":"33"},{"size":273,"mtime":1608056473566,"results":"40","hashOfConfig":"33"},{"size":473,"mtime":1608653925779,"results":"41","hashOfConfig":"33"},{"size":273,"mtime":1608653925792,"results":"42","hashOfConfig":"33"},{"size":346,"mtime":1609092909181,"results":"43","hashOfConfig":"33"},{"size":1679,"mtime":1609076018826,"results":"44","hashOfConfig":"33"},{"size":67397,"mtime":1608653925797,"results":"45","hashOfConfig":"46"},{"size":180671,"mtime":1608653925795,"results":"47","hashOfConfig":"33"},{"size":3287,"mtime":1609110948745,"results":"48","hashOfConfig":"33"},{"size":9866,"mtime":1609105781412,"results":"49","hashOfConfig":"33"},{"size":244,"mtime":1608827748872,"results":"50","hashOfConfig":"33"},{"size":2385,"mtime":1609092909178,"results":"51","hashOfConfig":"33"},{"size":2911,"mtime":1609112139706,"results":"52","hashOfConfig":"33"},{"size":670,"mtime":1609092909180,"results":"53","hashOfConfig":"33"},{"size":854,"mtime":1608827748871,"results":"54","hashOfConfig":"33"},{"size":1578,"mtime":1609092909177,"results":"55","hashOfConfig":"33"},{"size":626,"mtime":1609146923445,"results":"56","hashOfConfig":"33"},{"size":551,"mtime":1609092909179,"results":"57","hashOfConfig":"33"},{"size":545,"mtime":1609146183908,"results":"58","hashOfConfig":"33"},{"size":4088,"mtime":1609107119042,"results":"59","hashOfConfig":"33"},{"size":1359,"mtime":1609111742036,"results":"60","hashOfConfig":"33"},{"size":1559,"mtime":1609147328134,"results":"61","hashOfConfig":"33"},{"size":1398,"mtime":1609092909179,"results":"62","hashOfConfig":"33"},{"size":600,"mtime":1609107453331,"results":"63","hashOfConfig":"33"},{"size":2622,"mtime":1609145143481,"results":"64","hashOfConfig":"33"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"1wnb8nm",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o6yqkq",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"67"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"67"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\index.js",[],["130","131"],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\reportWebVitals.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\store.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\App.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList-reducer.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMapContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryListContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\HeaderContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraphContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\FooterContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCasesContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTableContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryList.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\redux\\countryInfoList.js",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountryList.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidGraph\\CovidGraph.jsx",["132","133"],"import { Bar, Line } from 'react-chartjs-2';\r\nimport React, { Component } from 'react';\r\n\r\nimport axios from 'axios';\r\nimport styles from './CovidGraph.module.scss';\r\n\r\nexport default class CovidGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.input = React.createRef();\r\n    this.isDaily = false;\r\n\r\n    this.state = {\r\n      chartData: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getGlobalCasesData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.activeCountry.country !== prevProps.activeCountry.country)\r\n      this.getCountryCasesData();\r\n  }\r\n\r\n  getGlobalCasesData(indicator = 'cases') {\r\n    axios\r\n      .get('https://disease.sh/v3/covid-19/historical/all?lastdays=366')\r\n      .then((response) => {\r\n        this.isDaily\r\n          ? this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: Object.keys(response.data[indicator]),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Global daily cases',\r\n                      data: Object.values(response.data[indicator]).map(\r\n                        (item, index, arr) => {\r\n                          if (arr[index + 1] > arr[index])\r\n                            return arr[index + 1] - arr[index];\r\n                        }\r\n                      ),\r\n                      backgroundColor: '#F2AA16',\r\n                      borderColor: '#F2AA16',\r\n                      borderWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Global daily cases',\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [\r\n                      {\r\n                        ticks: { fontColor: '#bdbdbd' },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          : this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: Object.keys(response.data[indicator]),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Global cases',\r\n                      data: Object.values(response.data[indicator]),\r\n                      pointBorderColor: '#F2AA16',\r\n                      pointBackgroundColor: '#F2AA16',\r\n                      pointWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Global cases',\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          callback: (value) => `${value / 10e6}M`,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            });\r\n      });\r\n  }\r\n\r\n  getCountryCasesData(indicator = 'confirmed') {\r\n    axios\r\n      .get(\r\n        `https://api.covid19api.com/dayone/country/${this.props.activeCountry.country}/status/${indicator}`\r\n      )\r\n      .then((response) => {\r\n        this.isDaily\r\n          ? this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: response.data.map((item) =>\r\n                    new Date(item.Date).toString().substring(4, 11)\r\n                  ),\r\n                  datasets: [\r\n                    {\r\n                      label: `${this.props.activeCountry.country} daily cases`,\r\n                      data: response.data\r\n                        .map((item) => item.Cases)\r\n                        .map((item, index, arr) => {\r\n                          if (arr[index + 1] > arr[index])\r\n                            return arr[index + 1] - arr[index];\r\n                        }),\r\n                      backgroundColor: '#F2AA16',\r\n                      borderColor: '#F2AA16',\r\n                      borderWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: `${this.props.activeCountry.country} daily cases`,\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [{ ticks: { fontColor: '#bdbdbd' } }],\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          : this.setState({\r\n              chartData: {\r\n                data: {\r\n                  labels: response.data.map((item) =>\r\n                    new Date(item.Date).toString().substring(4, 11)\r\n                  ),\r\n                  datasets: [\r\n                    {\r\n                      label: 'Country cases',\r\n                      data: response.data.map((item) => item.Cases),\r\n                      pointBorderColor: '#F2AA16',\r\n                      pointBackgroundColor: '#F2AA16',\r\n                      pointWidth: 1,\r\n                    },\r\n                  ],\r\n                },\r\n                options: {\r\n                  title: {\r\n                    display: true,\r\n                    text: `${this.props.activeCountry.country}  cases`,\r\n                    fontColor: '#bdbdbd',\r\n                  },\r\n                  legend: { display: false },\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          unit: 'day',\r\n                          unitStepSize: 30,\r\n                        },\r\n                        ticks: {\r\n                          autoSkip: false,\r\n                          maxRotation: 0,\r\n                          minRotation: 0,\r\n                          fontColor: '#bdbdbd',\r\n                        },\r\n                      },\r\n                    ],\r\n                    yAxes: [{ ticks: { fontColor: '#bdbdbd' } }],\r\n                  },\r\n                },\r\n              },\r\n            });\r\n      });\r\n  }\r\n\r\n  changeInput(e) {\r\n    const target = e.target;\r\n    this.isDaily = target.type === 'checkbox' ? target.checked : target.value;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.covidGraph}>\r\n        {this.isDaily ? (\r\n          <Bar\r\n            data={this.state.chartData.data}\r\n            options={this.state.chartData.options}\r\n            width={'100%'}\r\n            height={'100%'}\r\n          />\r\n        ) : (\r\n          <Line\r\n            data={this.state.chartData.data}\r\n            options={this.state.chartData.options}\r\n            width={'100%'}\r\n            height={'100%'}\r\n          />\r\n        )}\r\n        <div>\r\n          <button\r\n            id='cases'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.innerText)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            confirmed\r\n          </button>\r\n          <button\r\n            id='deaths'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.id)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            deaths\r\n          </button>\r\n          <button\r\n            id='recovered'\r\n            onClick={(event) =>\r\n              this.props.activeCountry\r\n                ? this.getCountryCasesData(event.target.id)\r\n                : this.getGlobalCasesData(event.target.id)\r\n            }\r\n          >\r\n            recovered\r\n          </button>\r\n          <label>\r\n            Daily\r\n            <input\r\n              type='checkbox'\r\n              ref={this.input}\r\n              onChange={(e) => this.changeInput(e)}\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Header\\Header.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidMap\\CovidMap.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CovidTable.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\GlobalCases\\GlobalCases.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\Footer\\Footer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearchContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecoveredContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeathsContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevelContainer.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\CountrySearch\\CountrySearch.jsx",["134"],"import React, { Component } from 'react';\r\nimport styles from './CountrySearch.module.scss';\r\n\r\nconst WORLD_WIDE_NUMBERS = {\r\n  POPULATION_KOEFICIENT: 100000,\r\n};\r\n\r\nconst POPULATION_COUNT_TYPE = {\r\n  ABSOLUTE_TYPE: 'absolute',\r\n  RELATIVE_TYPE: 'relative',\r\n};\r\n\r\nconst COUNTRY_SELECTED = {\r\n  TRUE: true,\r\n  FALSE: false,\r\n};\r\nexport default class CountrySearch extends Component {\r\n  state = {\r\n    searchTerm: '',\r\n  };\r\n\r\n  selectCountry(country) {\r\n    this.setState({ searchTerm: country });\r\n  }\r\n\r\n  // onCountryChanged(activeCountry) {\r\n  //   this.props.setActiveCountry(activeCountry);\r\n  // }\r\n  \r\n  onCountryChanged(activeCountry) {\r\n      this.setState({ searchTerm: '' });\r\n    this.props.setActiveCountry(activeCountry);\r\n    this.props.setIsCountrySelected(COUNTRY_SELECTED.TRUE);\r\n    const relativeActiveCountry = this.convertActiveCountryToRelativePopulationType(\r\n      activeCountry\r\n    );\r\n    this.props.setActiveRelativeCountry(relativeActiveCountry);\r\n\r\n    this.props.populationValueType === POPULATION_COUNT_TYPE.RELATIVE_TYPE\r\n      ? this.props.setCovidTableActiveCountry(relativeActiveCountry)\r\n      : this.props.setCovidTableActiveCountry(activeCountry);\r\n\r\n  }\r\n\r\n  convertActiveCountryToRelativePopulationType(activeCountry) {\r\n    const newActiveCountry = { ...activeCountry };\r\n    newActiveCountry.todayDeaths = this.convertNumberToRelativePopulationType(\r\n      activeCountry.todayDeaths,\r\n      activeCountry.population\r\n    );\r\n    newActiveCountry.deaths = this.convertNumberToRelativePopulationType(\r\n      activeCountry.deaths,\r\n      activeCountry.population\r\n    );\r\n    newActiveCountry.todayRecovered = this.convertNumberToRelativePopulationType(\r\n      activeCountry.todayRecovered,\r\n      activeCountry.population\r\n    );\r\n    newActiveCountry.recovered = this.convertNumberToRelativePopulationType(\r\n      activeCountry.recovered,\r\n      activeCountry.population\r\n    );\r\n    newActiveCountry.todayCases = this.convertNumberToRelativePopulationType(\r\n      activeCountry.todayCases,\r\n      activeCountry.population\r\n    );\r\n    newActiveCountry.cases = this.convertNumberToRelativePopulationType(\r\n      activeCountry.cases,\r\n      activeCountry.population\r\n    );\r\n\r\n    return newActiveCountry;\r\n  }\r\n\r\n  convertNumberToRelativePopulationType(number, population) {\r\n    return Math.floor(\r\n      (number / population) * WORLD_WIDE_NUMBERS.POPULATION_KOEFICIENT\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.countrySearch}>\r\n        <input\r\n          type='text'\r\n          className={styles.search}\r\n          placeholder='Search for a Country'\r\n          value={this.state.searchTerm}\r\n          onInput={(event) => this.selectCountry(event.target.value)}\r\n        />\r\n        <div\r\n          className={\r\n            this.state.searchTerm.length !== 0\r\n              ? styles.results\r\n              : styles.results__hide\r\n          }\r\n        >\r\n          <ul className={styles.countries}>\r\n            {this.props.countryInfoList !== undefined ? (\r\n              this.props.countryInfoList.map((country) => {\r\n                if (\r\n                  country.country.toLowerCase().includes(this.state.searchTerm.toLowerCase())\r\n                ) {\r\n                  return (\r\n                    <li\r\n                      key={country.CountryCode}\r\n                      className={styles.countryItem}\r\n                      onClick={() => this.onCountryChanged(country)}\r\n                    >\r\n                      <img\r\n                        src={country.countryInfo.flag}\r\n                        className={styles.countryItem_flag}\r\n                        alt='flag'\r\n                      />\r\n                      <h3 className={styles.countryItem_name}>\r\n                        {country.country}\r\n                      </h3>\r\n                    </li>\r\n                  );\r\n                }\r\n              })\r\n            ) : (\r\n              <p>Something went wrong with API. Please, try again later!</p>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryDeaths\\CountryDeaths.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryRecovered\\CountryRecovered.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CovidTable\\CountryLevel\\CountryLevel.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\ListCountry\\ListCountryConteiner.jsx",[],"F:\\javaScript\\covid-dashboard\\covid-dashboard\\src\\components\\CountryList\\ListCountry\\ListCountry.jsx",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":40,"column":44,"nodeType":"141","messageId":"142","endLine":40,"endColumn":46},{"ruleId":"139","severity":1,"message":"140","line":155,"column":49,"nodeType":"141","messageId":"142","endLine":155,"endColumn":51},{"ruleId":"139","severity":1,"message":"140","line":100,"column":56,"nodeType":"141","messageId":"142","endLine":100,"endColumn":58},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]